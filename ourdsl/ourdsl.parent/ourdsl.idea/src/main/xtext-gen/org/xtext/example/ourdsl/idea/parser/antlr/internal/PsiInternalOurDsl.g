/*
 * generated by Xtext 2.9.0.beta5
 */
grammar PsiInternalOurDsl;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.xtext.example.ourdsl.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.ourdsl.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.xtext.example.ourdsl.idea.lang.OurDslElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.xtext.example.ourdsl.services.OurDslGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected OurDslGrammarAccess grammarAccess;

	protected OurDslElementTypeProvider elementTypeProvider;

	public PsiInternalOurDslParser(PsiBuilder builder, TokenStream input, OurDslElementTypeProvider elementTypeProvider, OurDslGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	ruleModel
	EOF;

// Rule Model
ruleModel:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_GreetingsGreetingParserRuleCall_0ElementType());
			}
			lv_greetings_0_0=ruleGreeting
			{
				doneComposite();
			}
		)
	)*
;

//Entry rule entryRuleGreeting
entryRuleGreeting:
	{ markComposite(elementTypeProvider.getGreetingElementType()); }
	ruleGreeting
	EOF;

// Rule Greeting
ruleGreeting:
	(
		{
			markLeaf(elementTypeProvider.getGreeting_HelloKeyword_0ElementType());
		}
		otherlv_0='Hello'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getGreeting_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getGreeting_UsingKeyword_2ElementType());
		}
		otherlv_2='using'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getGreeting_DslOneMyGreetingCrossReference_3_0ElementType());
				}
				otherlv_3=RULE_ID
				{
					doneLeaf(otherlv_3);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getGreeting_AndKeyword_4ElementType());
		}
		otherlv_4='and'
		{
			doneLeaf(otherlv_4);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getGreeting_DslTwoYourGreetingCrossReference_5_0ElementType());
				}
				otherlv_5=RULE_ID
				{
					doneLeaf(otherlv_5);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getGreeting_ExclamationMarkKeyword_6ElementType());
		}
		otherlv_6='!'
		{
			doneLeaf(otherlv_6);
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
